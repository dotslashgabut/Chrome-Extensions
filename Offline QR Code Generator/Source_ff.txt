port this code to chrome extension manifest json v3.
keep the original code. keep when save the qr code to PNG and SVG.
this QR Code generator using QRcode library from kazuhikoarase https://cdnjs.cloudflare.com/ajax/libs/qrcode-generator/1.4.4/qrcode.min.js

// manifest.json
{
  "manifest_version": 2,
  "name": "Offline QR Code Generator",
  "version": "0.1.1",
  "description": "Generate and save QR codes with various data types",
  "permissions": ["activeTab", "downloads", "tabs", "storage"],
  "browser_action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "favicon_16.png",
      "48": "favicon_48.png",
      "128": "favicon_128.png"
    }
  },
  "background": {
    "scripts": ["background.js"]
  },
  "icons": {
    "16": "favicon_16.png",
    "48": "favicon_48.png",
    "128": "favicon_128.png"
  }
}

// popup.html
<!DOCTYPE html>
<html>
<head>
  <title>Offline QR Code Generator</title>
  <style>
    body {
      width: 280px;
      padding: 3px;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f8f9fa;
      color: #333;
    }
    .container {
      background-color: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    h1 {
      font-size: 1.1em;
      margin-bottom: 20px;
      color: #2c3e50;
      text-align: center;
    }
    select, input, button {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
      box-sizing: border-box;
    }
    select {
      appearance: none;
      background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E');
      background-repeat: no-repeat;
      background-position: right 10px top 50%;
      background-size: 12px auto;
    }
    button {
      background-color: #ffd700;
      color: #333;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.1s;
      font-weight: bold;
    }
    button:hover {
      background-color: #ffed4a;
    }
    button:active {
      transform: scale(0.98);
    }
    .error {
      color: #e74c3c;
      margin-bottom: 10px;
      font-size: 12px;
      text-align: center;
    }
    #qrPreview {
      display: none;
      margin-top: 10px;
      text-align: center;
      transition: opacity 0.3s ease-in-out;
    }
    #qrcode {
      display: inline-block;
      padding: 10px;
      margin: 0 auto;
      background-color: white;
      border-radius: 4px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      width: 220px;  /* Fixed width */
      height: 220px; /* Fixed height */
    }
    #qrcode img {
      display: block;
      margin: 0 auto;
      width: 100%;
      height: 100%;
      object-fit: contain;
    }
    .download-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 15px;
    }
    .download-buttons button {
      width: 48%;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Offline QR Code Generator</h1>
    <select id="dataType">
      <option value="text">Text</option>
      <option value="url">URL</option>
      <option value="email">Email</option>
      <option value="phone">Phone Number</option>
      <option value="wifi">WiFi Credentials</option>
      <option value="contact">Contact Information</option>
    </select>
    <div id="inputFields"></div>
    <div id="errorMessage" class="error"></div>
    <button id="generate">Generate QR Code</button>
    <div id="qrPreview">
      <div id="qrcode"></div>
      <div class="download-buttons">
        <button id="savePNG">Save as PNG</button>
        <button id="saveSVG">Save as SVG</button>
      </div>
    </div>
  </div>
  <script src="qrcode.min.js"></script>
  <script src="popup.js"></script>
</body>
</html>

// popup.js
document.addEventListener('DOMContentLoaded', function() {
  const dataTypeSelect = document.getElementById('dataType');
  const inputFields = document.getElementById('inputFields');
  const errorMessage = document.getElementById('errorMessage');
  const generateButton = document.getElementById('generate');
  const qrcodeDiv = document.getElementById('qrcode');
  const qrPreview = document.getElementById('qrPreview');
  const savePNGButton = document.getElementById('savePNG');
  const saveSVGButton = document.getElementById('saveSVG');

  let qr = null;

  // Set default QR type to URL
  dataTypeSelect.value = 'url';
  updateInputFields();

  // Auto-fill URL from current tab
  browser.tabs.query({active: true, currentWindow: true}, function(tabs) {
    const currentUrl = tabs[0].url;
    const inputData = document.getElementById('inputData');
    if (inputData) {
      inputData.value = currentUrl;
    }
  });

  dataTypeSelect.addEventListener('change', updateInputFields);

  function updateInputFields() {
    const dataType = dataTypeSelect.value;
    inputFields.textContent = ''; // Clear existing content safely
    
    const fragment = document.createDocumentFragment();
    
    const createInput = (type, id, placeholder) => {
      const input = document.createElement('input');
      input.type = type;
      input.id = id;
      input.placeholder = placeholder;
      return input;
    };
    
    switch (dataType) {
      case 'text':
        fragment.appendChild(createInput('text', 'inputData', 'Enter text'));
        break;
      case 'url':
        fragment.appendChild(createInput('url', 'inputData', 'Enter URL'));
        break;
      case 'email':
        fragment.appendChild(createInput('email', 'inputData', 'Enter email'));
        break;
      case 'phone':
        fragment.appendChild(createInput('tel', 'inputData', 'Enter phone number'));
        break;
      case 'wifi':
        fragment.appendChild(createInput('text', 'ssid', 'SSID'));
        fragment.appendChild(createInput('password', 'password', 'Password'));
        const select = document.createElement('select');
        select.id = 'encryption';
        ['WPA/WPA2', 'WEP', 'No Encryption'].forEach((option, index) => {
          const optionElement = document.createElement('option');
          optionElement.value = ['WPA', 'WEP', 'nopass'][index];
          optionElement.textContent = option;
          select.appendChild(optionElement);
        });
        fragment.appendChild(select);
        break;
      case 'contact':
        fragment.appendChild(createInput('text', 'name', 'Name'));
        fragment.appendChild(createInput('tel', 'phone', 'Phone'));
        fragment.appendChild(createInput('email', 'email', 'Email'));
        fragment.appendChild(createInput('text', 'address', 'Address'));
        break;
    }
    
    inputFields.appendChild(fragment);
    
    // If the data type is URL, try to auto-fill it
    if (dataType === 'url') {
      browser.tabs.query({active: true, currentWindow: true}, function(tabs) {
        const currentUrl = tabs[0].url;
        const inputData = document.getElementById('inputData');
        if (inputData) {
          inputData.value = currentUrl;
        }
      });
    }
  }

  function validateInput(dataType) {
    const getValue = id => document.getElementById(id).value;
    switch(dataType) {
      case 'text':
        return getValue('inputData').trim() !== '';
      case 'url':
        return /^(https?:\/\/)?([\w.-]+)(:\d+)?([\w\d\s\/\-._~:\/?#[\]@!$&'()*+,;=]*)$/.test(decodeURIComponent(getValue('inputData')));
      case 'email':
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(getValue('inputData'));
      case 'phone':
        return /^\+?[\d\s()-]{10,}$/.test(getValue('inputData'));
      case 'wifi':
        return getValue('ssid').trim() !== '' && (getValue('encryption') === 'nopass' || getValue('password').trim() !== '');
      case 'contact':
        return getValue('name').trim() !== '' && (getValue('phone').trim() !== '' || getValue('email').trim() !== '');
    }
  }

  function getQRData(dataType) {
    const getValue = id => document.getElementById(id).value;
    switch(dataType) {
      case 'text':
      case 'url':
      case 'email':
      case 'phone':
        return getValue('inputData');
      case 'wifi':
        return `WIFI:T:${getValue('encryption')};S:${getValue('ssid')};P:${getValue('password')};;`;
      case 'contact':
        return `BEGIN:VCARD
VERSION:3.0
FN:${getValue('name')}
TEL:${getValue('phone')}
EMAIL:${getValue('email')}
ADR:${getValue('address')}
END:VCARD`;
    }
  }

  generateButton.addEventListener('click', function() {
    const dataType = dataTypeSelect.value;
    if (!validateInput(dataType)) {
      errorMessage.textContent = 'Please enter valid data for the selected type.';
      qrPreview.style.display = 'none';
      return;
    }
    errorMessage.textContent = '';

    const qrData = getQRData(dataType);

    // Clear existing content safely
    qrcodeDiv.textContent = '';
    
    // Use requestAnimationFrame to delay QR code generation
    requestAnimationFrame(() => {
      qr = qrcode(0, 'M');
      qr.addData(qrData);
      qr.make();
      
      const qrImage = new Image();
      qrImage.src = qr.createDataURL(5);
      qrImage.alt = 'QR Code';
      qrImage.style.opacity = '0';
      qrImage.style.transition = 'opacity 0.3s ease-in-out';
      
      qrcodeDiv.appendChild(qrImage);

      // Trigger reflow
      qrcodeDiv.offsetHeight;

      qrImage.style.opacity = '1';
      qrPreview.style.display = 'block';
    });
  });

  savePNGButton.addEventListener('click', function() {
    if (!qr) return;
    const svgString = qr.createSvgTag(5);
    
    browser.runtime.sendMessage({
      action: "savePNG",
      svgString: svgString
    }).then(response => {
      if (response.success) {
        console.log("PNG saved successfully");
      } else {
        console.error("Failed to save PNG:", response.error);
      }
    }).catch(error => {
      console.error("Error in savePNG:", error);
    });
  });

  saveSVGButton.addEventListener('click', function() {
    if (!qr) return;
    const svgString = qr.createSvgTag(3);
    const blob = new Blob([svgString], {type: 'image/svg+xml'});
    const url = URL.createObjectURL(blob);
    browser.downloads.download({
      url: url,
      filename: 'qrcode.svg'
    });
  });

  updateInputFields();
});

// background.js
browser.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === "savePNG") {
    const svgString = message.svgString;
    const svgBlob = new Blob([svgString], {type: 'image/svg+xml;charset=utf-8'});
    const svgUrl = URL.createObjectURL(svgBlob);
    
    const img = new Image();
    img.onload = function() {
      const canvas = document.createElement('canvas');
      const size = img.width;
      const borderSize = Math.floor(size * 0.1);
      canvas.width = size + 2 * borderSize;
      canvas.height = size + 2 * borderSize;
      const ctx = canvas.getContext('2d');
      ctx.fillStyle = 'white';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(img, borderSize, borderSize);
      
      canvas.toBlob(function(blob) {
        const url = URL.createObjectURL(blob);
        browser.downloads.download({
          url: url,
          filename: 'qrcode.png',
          saveAs: true
        }).then(() => {
          URL.revokeObjectURL(url);
          URL.revokeObjectURL(svgUrl);
          sendResponse({success: true});
        }).catch(error => {
          console.error('Download failed:', error);
          sendResponse({success: false, error: error.toString()});
        });
      }, 'image/png');
    };
    img.onerror = function() {
      sendResponse({success: false, error: "Failed to load SVG"});
    };
    img.src = svgUrl;
    
    return true; // Indicates that we will send a response asynchronously
  }
});

browser.browserAction.onClicked.addListener((tab) => {
  browser.tabs.sendMessage(tab.id, { action: "getPageUrl" });
});

browser.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "setPageUrl") {
    browser.storage.local.set({ currentUrl: request.url });
  }
});
